// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  timezone      String    @default("UTC")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  plays Play[]
  dailyAggregates DailyAggregate[]
  calibrations    UserCalibrations?
  aggDaily        AggDaily[]
  @@map("users")
}

model Track {
  id         String   @id @default(cuid())
  name       String
  artistIds  String[] // Array of Spotify artist IDs
  spotifyId  String   @unique
  durationMs Int
  createdAt  DateTime @default(now())

  plays       Play[]
  audioFeature AudioFeature?
  @@map("tracks")
}

model AudioFeature {
  id            String  @id @default(cuid())
  trackId       String  @unique
  valence       Float
  energy        Float
  tempo         Float
  danceability  Float
  acousticness  Float
  speechiness   Float
  mode          Int
  loudness      Float
  createdAt     DateTime @default(now())

  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  @@map("audio_features")
}

model Play {
  id         String   @id @default(cuid())
  userId     String
  trackId    String
  playedAt   DateTime
  msPlayed   Int
  source     String   // 'oauth' or 'upload'
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  emotion Emotion?
  emotionPlay EmotionPlay?
  @@unique([userId, trackId, playedAt])
  @@map("plays")
}

model Emotion {
  id         String  @id @default(cuid())
  playId     String  @unique
  category   String  // ENUM: 'Excited/Happy', 'Calm/Content', 'Sad/Melancholic', 'Tense/Angry', 'Neutral'
  moodScore  Float
  // v3 enrichment (optional)
  label      String?
  valence    Float?
  arousal    Float?
  confidence Float?
  createdAt  DateTime @default(now())

  play Play @relation(fields: [playId], references: [id], onDelete: Cascade)
  @@map("emotions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model DailyAggregate {
  id               String   @id @default(cuid())
  userId           String
  bucketDate       DateTime // date (UTC) representing the day bucket, normalized by user tz during ingestion
  count            Int
  msPlayed         BigInt
  moodAvg          Float?
  dominantEmotion  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bucketDate])
  @@map("daily_aggregates")
}

model UserCalibrations {
  id        String   @id @default(cuid())
  userId    String   @unique
  v_lo      Float
  v_hi      Float
  e_lo      Float
  e_hi      Float
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_calibrations")
}

model EmotionPlay {
  id         String   @id @default(cuid())
  playId     String   @unique
  happy      Float
  calm       Float
  sad        Float
  tense      Float
  neutral    Float
  confidence Float
  createdAt  DateTime @default(now())

  play Play @relation(fields: [playId], references: [id], onDelete: Cascade)

  @@map("emotion_plays")
}

model AggDaily {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  moodAvg   Float?
  happy     Float?
  calm      Float?
  sad       Float?
  tense     Float?
  neutral   Float?
  plays     Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("agg_daily")
}